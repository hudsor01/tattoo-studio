generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactSubmission {
  id          String   @id @default(uuid())
  name        String
  email       String
  message     String
  files       String[]
  createdAt   DateTime @default(now())
  status      String   @default("PENDING")
  updatedAt   DateTime @updatedAt
  assignedTo  String?  // Optional field to track who is handling this submission
}

model Appointment {
  id            String   @id @default(cuid())
  clientName    String
  clientEmail   String
  clientPhone   String
  date          DateTime
  time          String
  duration      Int
  tattooType    String
  bodyPart      String
  designDescription String
  referenceImages String[]
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("PENDING")
  depositPaid   Boolean  @default(false)
  depositAmount Float?
  payments      Payment[]
}

// Payment model to track deposits and payments
model Payment {
  id            String   @id @default(cuid())
  appointmentId String
  amount        Float
  paymentType   String   // "DEPOSIT", "BALANCE", "FULL"
  paymentMethod String   // "CREDIT_CARD", "CASH", etc.
  last4         String?  // Last 4 digits of card if applicable
  status        String   @default("PENDING") // "PENDING", "COMPLETED", "FAILED", "REFUNDED"
  transactionId String?  // External payment processor transaction ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

// Artist model to track tattoo artists
model Artist {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  bio           String?
  specialties   String[]
  portfolioImages String[]
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String?
}

// NextAuth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model GalleryItem {
  id            String   @id @default(cuid())
  title         String
  description   String?
  imageUrl      String
  category      String
  tags          String[]
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PortfolioProject {
  id            String   @id @default(cuid())
  title         String
  description   String
  beforeImages  String[] // URLs to before images
  afterImages   String[] // URLs to after images
  processVideo  String?  // URL to process video if available
  clientStory   String?  // Client testimonial or story
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StudioInfo {
  id            String   @id @default(cuid())
  name          String
  address       String
  city          String
  state         String
  zipCode       String
  phone         String
  email         String
  hours         Json
  aboutText     String   @db.Text
  policies      String   @db.Text
  faqItems      Json
  socialLinks   Json
  updatedAt     DateTime @updatedAt
}
